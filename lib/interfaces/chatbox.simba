(*
Chatbox
=======

The chatbox file holds functions and procedures that are used in the
Runescape chat box.

The source for this file can be found
`here <https://github.com/SRL/SRL-6/blob/master/lib/interfaces/chatbox.simba>`_.

*)

{$f-}

(*
type TRSChatbox
~~~~~~~~~~~~~~~

A type that stores functions and properties of the Runescape chat box interface.
*)
type
  TRSChatbox = record(TRSInterface)
    lineBoxes: TBoxArray;
  end;

(*
var chatbox
~~~~~~~~~~~

Variable that stores functions and properties of the Runescape chatbox interface.
*)
var
  chatbox: TRSChatbox;

const
  CHATBOX_TESSERACT_FILTER: TTesseractFilter = [3, 3, [False, 35, TM_Mean]];

{*
TRSChatbox.__init
~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TRSChatbox.__init();

Initiates the chatbox variable.

.. note::

    - by Coh3n
    - Last Updated: 08 August 2013 by Coh3n

Example:

.. code-block:: pascal

    chatbox.__init();
*}
{$IFNDEF CODEINSIGHT}
procedure TRSChatbox.__init();
begin
  with self do
  begin
    name := 'RS Chat Box';
    ID := ID_INTERFACE_CHAT_BOX;
    parentID := -1;
    static := false;
  end;
end;
{$ENDIF}

{*
TRSChatbox.__setup
~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TRSChatbox.__setup();

Sets up the chat box variables.

.. note::

    - by Olly
    - Last Updated: 1 August 2013 by The Mayor

Example:

.. code-block:: pascal

    chatbox.__setup();
*}
{$IFNDEF CODEINSIGHT}
procedure TRSChatbox.__setup();
var
  b, chatBounds: TBox;
  wid, hei, i: integer;
  p: TPoint;
begin
  setLength(self.lineBoxes, 0);
  getClientDimensions(wid, hei);

  self.setBounds([1, actionBar.y2, gameTabs.tabArea.x1, hei-2]);
  chatBounds := chatBox.getChatArea();

  for i := 0 to 10 do
  begin
    p.y := 568 - (i * 14);
    b := [chatBounds.x1, p.y - 7, chatBounds.x2, p.y + 7];

    if (b.y1 < chatBox.getChatArea().y1) then
      break();

    insert(b, self.lineBoxes, high(self.lineBoxes)+1);
  end;
end;
{$ENDIF}

(*
TRSChatbox.getChatArea
~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TRSChatbox.getChatArea(): TBox;

Returns a TBox of the chat box area.

.. note::

    - by Olly
    - Last Updated: 17 October 2013 by Olly

Example:

.. code-block:: pascal

    area := chatbox.getCharArea();
*)
function TRSChatbox.getChatArea(): TBox;
begin
  result := intToBox(self.x1+3, self.y1 + 68, self.x2-20, self.y2-22);
end;

(*
TRSChatbox.findAnyText
~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TRSChatbox.findAnyText(txt: TStringArray): boolean;

Initiates the chatbox variable.

.. note::

    - by Olly
    - Last Updated: 17 October 2013 by Olly

Example:

.. code-block:: pascal

    chatbox.findAnyText(['Hello']);
*)
function TRSChatbox.findText(txt: TStringArray; const Filter: TTesseractFilter = CHATBOX_TESSERACT_FILTER): boolean;
var
  s: string;
  b: TBox;
begin
  b := Self.getChatArea();
  s := Tesseract_GetText(b.x1, b.y1, b.x2, b.y2, Filter);

  if (length(s) > 1) then
    result := IsArrInStr(txt, s);
end;

function TRSChatbox.getTextOnLine(Line: Integer; Filter: TTesseractFilter = CHATBOX_TESSERACT_FILTER): String;
begin
  if (not inRange(Line, Low(Self.lineBoxes), High(Self.lineBoxes))) then
    Exit(Print('TRSChatBox.getTextOnLine(): Invaild line', False));

  with (Self.lineBoxes[Line]) do
    Result := Tesseract_GetText(x1, y1, x2, y2, Filter);
end;

(*
TRSChatbox.findTextOnLines
~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TRSChatbox.findTextOnLines(txt: TStringArray; lines: TIntegerArray): boolean;

Returns true if the text in 'txt' is found on the 'lines' of the chatbox.  The
lines start with 0 being the bottom chat line.

.. note::

    - by Olly
    - Last Updated: 17 October 2013 by Olly

Example:

.. code-block:: pascal

    // returns true if "Hello" is found on the first 4 lines
    chatbox.findTextOnLines(['Hello'], [0..3]);
*)
function TRSChatbox.findTextOnLines(txt: TStringArray; lines: TIntegerArray; Filter: TTesseractFilter = CHATBOX_TESSERACT_FILTER): boolean;
var
  i: integer;
  s: string;
begin
  result := false;

  for i := 0 to high(lines) do
  begin
    s := Self.getTextOnLine(Lines[i], Filter);
    if (IsArrInStr(txt, s)) then
    begin
      print('TRSChatBox.findTextOnLines(): Found text '+toStr(txt)+' on line '+intToStr(lines[i]));
      exit(true);
    end;
  end;
end;

function TRSChatbox.getXPBar(): Integer;
const
  Filter: TTesseractFilter = [5, 5, [False, 30, TM_Mean]];
var
  b: TBox;
  i, p: Integer;
  TPA, TextPoints: TPointArray;
  ATPA: T2DPointArray;
  s: String;
begin
  Result := 0;

  if (not FindColorsTolerance(TPA, 13158856, IntToBox(Self.X2 - 220, Self.Y1 + 16, Self.X2 - 5, Self.Y1 + 38), 30, ColorSetting(2, 4.17, 0.23))) then
  begin
    Print('TRSChatbox.getXP(): Failed to find text to read', TDebug.ERROR);
    Exit();
  end;

  ATPA := ClusterTPAEx(TPA, 1, 1);
  for i := 0 to High(ATPA) do
  begin
    b := GetTPABounds(ATPA[i]);
    if (inRange(b.getWidth(), 2, 7)) and (inRange(b.getHeight(), 5, 9)) then
      Insert(ATPA[i], TextPoints);
  end;

  b := GetTPABounds(TextPoints);
  if (b.getWidth() < 3) or (b.getHeight() < 3) then
    Exit();

  s := Tesseract_GetText(b.X1 - 2, b.Y1 - 5, b.X2 + 2, b.Y2 + 5, Filter);
  p := Pos('xp', s);
  if (p > 0) then
    s := Copy(s, p + 2, Length(s) - (p + 1));

  Result := StrToIntDef(ExtractFromStr(s, Numbers), 0);
end;

begin
  chatbox.__init();
end;

{$f+}
